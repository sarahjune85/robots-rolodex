{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","robot","id","name","email","CardList","robots","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","class","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAIaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,MAAMC,GAAtC,eACpB,mCAAML,EAAMI,MAAME,KAAlB,OACA,4BAAIN,EAAMI,MAAMG,YCFPC,G,MAAW,SAACR,GAAD,OACtB,qBAAKC,UAAU,YAAf,SACGD,EAAMS,OAAOC,KAAI,SAACN,GAAD,OAChB,cAAC,EAAD,CAAqBA,MAAOA,GAAjBA,EAAMC,WCLVM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EAGbG,SAAUF,MCoDCG,G,wDAtDb,aAAe,IAAD,8BACZ,gBA4BFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAzBtC,EAAKC,MAAQ,CACXb,OAAQ,GACRU,YAAa,IAPH,E,qDAcd,WAAqB,IAAD,OAGlBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,OAAQkB,S,oBAiB7C,WAAS,MAEyBC,KAAKN,MAA7Bb,EAFD,EAECA,OAAQU,EAFT,EAESA,YAEVU,EAAiBpB,EAAOqB,QAAO,SAAC1B,GAAD,OACnCA,EAAME,KAAKyB,cAAcC,SAASb,EAAYY,kBAGhD,OACE,sBAAK9B,UAAU,MAAf,UACE,oBAAIgC,MAAM,QAAV,6BACA,cAAC,EAAD,CAAWrB,YAAY,gBAAgBC,aAAce,KAAKf,eAC1D,cAAC,EAAD,CAAUJ,OAAQoB,W,GAjDRK,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fcc661b2.chunk.js","sourcesContent":["import React from \"react\";\n// don't forget each component's css:\nimport \"./card.styles.css\";\n\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img alt=\"robot\" src={`https://robohash.org/${props.robot.id}?set=set1`} />\n    <h1> {props.robot.name} </h1>\n    <p>{props.robot.email}</p>\n  </div>\n);\n","import React from \"react\";\n//import child component:\nimport { Card } from \"../card/card.component\";\nimport \"./card-list.styles.css\";\n\n// pass card component into card-list component:\nexport const CardList = (props) => (\n  <div className=\"card-list\">\n    {props.robots.map((robot) => (\n      <Card key={robot.id} robot={robot} />\n    ))}\n  </div>\n);\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\n// functional component, as opposed to class component:\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    // setState is an async function call! does not happen in immediate sense.\n    // used a second argument function with this.state to show latest value in clg.\n    onChange={handleChange}\n  />\n);\n","import React, { Component } from \"react\";\n// import parent component:\nimport { CardList } from \"./components/card-list/card-list.component\";\n//import reusable searchbox component:\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\n\n// class Component:\nclass App extends Component {\n  constructor() {\n    super();\n\n    // state trickles down as props - state can go wherever we want, not just here.\n    // state notifies render function to render again\n    this.state = {\n      robots: [],\n      searchField: \"\",\n    };\n    // sets context of this to this keyword defined by constructor, if not using an arrow:\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  // using componentDidMount lifecycle method - accessed through Component.\n  componentDidMount() {\n    // fetch users placeholder as a JSON\n    // take the users that we got back from it, and set robots to that array of users.\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ robots: users }));\n  }\n\n  // function - this has to explicitly be bound in constructor:\n  // handleChange(e) {\n  //   this.setState({ searchField: e.target.value });\n  // }\n\n  // OR use arrow function's lexical scoping for class methods -\n  // automatically binds, no need for constructor bind line:\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  /* Anytime you use the map() function inside of render, or you have a \n  list of the same jsx elements one after another, use a key attribute. */\n  /* onChange = fires whenever any change in field is detected, so for a dynamic search field */\n  render() {\n    //pull properties off objects and set them here:\n    const { robots, searchField } = this.state;\n    // triggers setState whenever user types something in - filters robot names, re-renders\n    const filteredRobots = robots.filter((robot) =>\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1 class=\"title\">Robot Directory</h1>\n        <SearchBox placeholder=\"search robots\" handleChange={this.handleChange} />\n        <CardList robots={filteredRobots} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// index page,\n// rendering your App.js:\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\") // root id is in public/index.html\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}